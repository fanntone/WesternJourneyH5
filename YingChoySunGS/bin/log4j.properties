# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# An example log4j configuration file that outputs to System.out.  The
# output information consists of relative time, log level, thread
# name, logger name, nested diagnostic context and the message in that
# order.

# For the general syntax of property based configuration files see the
# documentation of org.apache.log4j.PropertyConfigurator.



#****************************************************************************************
# log4j主要元件:
# 1.Logger   : 在程式中負責記錄訊息的元件
# 2.Appender : 負責將Logger內記錄的訊息輸出到各種裝置上(console,檔案,寄信 etc...) , 
#              一個Logger可以有多個Appender,
#              所以Logger能夠同時輸出到多個裝置上
# 3.Layout   : 決定記錄的輸出方式(時間,等級,類別名稱 etc...)
#****************************************************************************************


#****************************************************************************************
# 設定最高層級Logger:
#
# Logger 的等級有 : DEBUG, INFO, WARN, ERROR, FATAL 5 種 (左邊等級最低,右邊等級最高)
# 通常只會用到 DEBUG, INFO, WARN, ERROR
# 如果設定等級為 INFO , 會只輸出 INFO , WARN , ERROR FATAL 的資訊
#
# 設定方式:
# log4j.rootLogger=[level] , ([appenderName]) , ([appenderName]) , ...
#****************************************************************************************
log4j.rootLogger=DEBUG, CONSOLE

#****************************************************************************************
# 設定Appender:
#
# Appender：替換為以下部分
# org.apache.log4j.ConsoleAppender               ：主控台
# org.apache.log4j.FileAppender                  ：檔案
# org.apache.log4j.DailyRollingFileAppender      ：每天產生一個 log 檔案
# org.apache.log4j.RollingFileAppender           ：檔案大小超過一個指定的大小的時候更換檔案
# org.apache.log4j.WriteAppender                 ：將 log 內容用 Stream 的方式發送出去
#
# 設定方式:
# log4j.appender.[appenderName] = [Appender類別]
#****************************************************************************************
log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender

# L1 is set to be a ConsoleAppender which outputs to System.out. 
#log4j.appender.L1=org.apache.log4j.FileAppender
#log4j.appender.L1.File=/Users/superhandsomejason/log4j.txt
log4j.appender.L1=org.apache.log4j.DailyRollingFileAppender
log4j.appender.L1.File=PORPG.log
log4j.appender.L1.DatePattern='.'yyyy-MM-dd_HH
log4j.appender.L1.append=true


#****************************************************************************************
# 設定Layout使用方式:
#
# Layout : 替換為以下部分
# org.apache.log4j.HTMLLayout       :使用 html 格式撰寫 log
# org.apache.log4j.PatternLayout    :使用指定格式撰寫 log
# org.apache.log4j.SimpleLayout     :基本的格式
# org.apache.log4j.TTCCLayout       :包含 log 的時間, thread, class 的格式
#
# 設定方式:
# log4j.appender.[appenderName].layout = [Layout類別]
#****************************************************************************************
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout

# L1 uses PatternLayout.
log4j.appender.L1.layout=org.apache.log4j.PatternLayout


#****************************************************************************************
# 設定Layout格式:
#
# The conversion pattern uses format specifiers. You might want to
# change the pattern an watch the output format change.
# %m  輸出程式碼中指定的信息
# %p  輸出的優先等級, eg : DEBUG,INFO,WARN,ERROR,FATAL , %-5p 表示補齊五個字
# %r  輸出軟體啓動到輸出 log 所需要的毫秒數
# %c  輸出類別名稱
# %t  輸出產生該日誌事件的線程名
# %n  輸出一個換行符號, windows 為 rn, unix 為 n
# %d  輸出日期與時間, default 為 ISO8601, 也可以直接指定格式, eg : %d{yyy MMM dd HH:mm:ss,SSS}, 則會輸出 :2012年10月18日 22:10:28,921
# %l  輸出 log 的發生位置, 包含 class 名稱, Thread 名稱, 程式碼行數. eg : TestLog4j.main(TestLog4j.java:10)
#
# 設定方式:
# log4j.appender.[appenderName].layout.ConversionPattern = ([%x]) ([%y]) (...) 
#****************************************************************************************
#log4j.appender.CONSOLE.layout.ConversionPattern=%d{HH:mm:ss SSS} [%f] [%-5p]%m%n
#log4j.appender.CONSOLE.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss SSS} [%-5p] [%c{2}] %m%n
#log4j.appender.CONSOLE.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss SSS} [%-5p] %m%n
#log4j.appender.CONSOLE.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss SSS} [%-5p] [%t] [%X{logWriter}] [%c{2}] %m%n
log4j.appender.CONSOLE.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss SSS} [%-5p] [%X{logWriter}] [%c{2}] %m%n

#log4j.appender.L1.layout.ConversionPattern=%-4r %-5p [%t] %37c %3x - %m%n
#log4j.appender.L1.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss SSS} [%c]-[%p] %m%n
log4j.appender.L1.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss SSS} [%p] %m%n

#****************************************************************************************
# 另外一種FileAppender是依照日期分割檔案的DailyRollingFileAppender，設定方式如下
#
#參數檔的內容如下：
#
#log4j.rootLogger=INFO
#ConsoleAppender
#log4j.appender.Console=org.apache.log4j.ConsoleAppender
#log4j.appender.Console.layout=org.apache.log4j.PatternLayout
#log4j.appender.Console.layout.ConversionPattern=[LOG][%d{yy/MM/dd HH:mm:ss:SSS}][%C-%M] %m%n
#
#第一行的『log4j.rootLogger=INFO』表示LOG的輸出等級，輸出等級由低至高分為以下六種：
#
#    TRACE - TRACE等級表示所有LOG皆輸出
#    DEBUG - DEBUG等級通常用於DEBUG階段，輸出DEBUG時所需，但正式使用時不需要的訊息
#    INFO - INFO等級表示輸出的訊息不是太嚴重，但是可以幫助判斷問題或記錄執行期間所需的資訊
#    WARN - WARN表示輸出的訊息已經可能造成某些問題，但還不至於對整體系統造成影響
#    ERROR - ERROR等級表示輸出的訊息已經構成一定程度的錯誤，甚至會對系統產生影響
#    FATAL - FATAL表示這個錯誤已經非常嚴重
#    ALL、OFF  - 另外還有ALL跟OFF兩個設定值，分別表示全部輸出跟全部不輸出
#
#由此可知我們設定的『log4j.rootLogger=INFO』表示INFO等級以上的LOG才會輸出。
#
#第三行至第五行是一組的，這組所設定的是一個ConsoleAppender，這邊的Appender表示一種LOG輸出的方式，而ConsoleAppender就是最簡單，直接印在畫面上的方式。
#其中log4j.appender.Console的Console是這個Appender的名字，所以可以自由設定，例如log4j.appender.MyAppender，那麼這個Appender就叫做MyAppender。
#第三行及第四行是固定的寫法，表示我們這個Appender是ConsoleAppender，並且使用log4j內建的layout。
#第五行則是輸出的格式，格式的設定方式非常靈活，『[LOG]』表示所有訊息前面都帶上[LOG]這個字串；
#『[%d{yy/MM/dd HH:mm:ss:SSS}]』表示LOG發生的日期時間，大括號內則是呈現的方式；『[%C-%M]』則是發生LOG的類別及方法，可以用來查找問題的發生點；『%m』是我們在程式中設定輸出的訊息；最後的『%n』是換行符號。
#
#輸出格式還有許多可以使用的設定，如下：
#
#    %c 輸出日誌訊息所屬的類別的全名。
#    %M 輸出日誌訊息所屬的方法的全名。
#    %d 輸出日誌時間點的日期或時間，指定格式的方式：%d{yyy-MM-dd HH:mm:ss }。
#    %l 輸出日誌事件的發生位置，即輸出日誌訊息的語句處於它所在的類別的第幾行。
#    %m 輸出訊息，如log(message)中的message。
#    %n 輸出一個列尾符號。
#    %p 輸出優先階層，即DEBUG，INFO，WARN，ERROR，FATAL。如果是調用debug()輸出的，則為DEBUG，依此類推。
#    %r 輸出自應用啟動到輸出該日誌訊息所耗費的毫秒數。
#    %t 輸出產生該日誌事件的線程名。
#    %f 輸出日誌訊息所屬的類別的類別名。
#
#
#
#****************************************************************************************
log4j.appender.File=org.apache.log4j.DailyRollingFileAppender
log4j.appender.File.layout=org.apache.log4j.PatternLayout
log4j.appender.File.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss SSS} [%-5p] [%X{logWriter}] [%c{2}] %m%n
log4j.appender.File.Threshold=INFO
log4j.appender.File.DatePattern='.'yyyy-MM-dd
log4j.appender.File.File=D:\00_Java\WorkSpace\OZ_DataServer\Log\DataServerLog.log


# In this example, we are not really interested in INNER loop or SWAP
# messages. See the effects of uncommenting and changing the levels of
# the following loggers.
# log4j.logger.org.apache.log4j.examples.SortAlgo.INNER=WARN
# log4j.logger.org.apache.log4j.examples.SortAlgo.SWAP=WARN

#****************************************************************************************
# 設定Hibernate 使用:
#
# 一般來說
# 若正式上線皆會設定為 ERROR
# 避免輸出過多不必要的資訊
# 而在開發或 Debug 時則可將 Log 層級修改為 DEBUG 以查看相關訊息
# 若要查看 Hibernate 的相關訊息, 如啟動資訊, 各種錯誤訊息 則可修改此層級
# 	log4j.logger.org.hibernate=DEBUG 
#
# 若要查看 Hibernate 的 SQL 或 HQL 是否正確 則可修改此層級
#    log4j.logger.org.hibernate.SQL=DEBUG  
#    log4j.logger.org.hibernate.hql=DEBUG  
#
# 若要查看 SQL 內帶入的變數值是否正確 則可修改此層級
#    log4j.logger.org.hibernate.type=DEBUG
#
# 若要查看 SQL 內帶入的變數型態是否正確註冊 則可修改此層級
#	log4j.logger.org.hibernate.type.BasicTypeRegistry=DEBUG 
#
#****************************************************************************************
#Debug
#log4j.logger.org.hibernate=INFO
#log4j.logger.org.hibernate=DEBUG
log4j.logger.org.hibernate=ERROR 

### log HQL query parser activity
#log4j.logger.org.hibernate.hql.ast.AST=INFO
#log4j.logger.org.hibernate.hql.ast.AST=DEBUG
log4j.logger.org.hibernate.hql.ast.AST=ERROR

### log just the SQL
log4j.logger.org.hibernate.SQL=ERROR  
#log4j.logger.org.hibernate.SQL=DEBUG
#log4j.logger.org.hibernate.SQL=TRACE

#log4j.logger.org.hibernate.engine.query=TRACE
#log4j.logger.org.hibernate.engine.query=DEBUG
log4j.logger.org.hibernate.engine.query=ERROR

### log HQL parse trees
log4j.logger.org.hibernate.hql=ERROR  
#log4j.logger.org.hibernate.hql=TRACE

### log JDBC bind parameters ###
log4j.logger.org.hibernate.type=ERROR
#log4j.logger.org.hibernate.type=TRACE
log4j.logger.org.hibernate.type.BasicTypeRegistry=ERROR 

### log schema export/update ###
#log4j.logger.org.hibernate.tool.hbm2ddl=WARN
log4j.logger.org.hibernate.tool.hbm2ddl=ERROR

### log cache activity ###
#log4j.logger.org.hibernate.cache=INFO
log4j.logger.org.hibernate.cache=ERROR

### log transaction activity
log4j.logger.org.hibernate.transaction=ERROR

### log JDBC resource acquisition
log4j.logger.org.hibernate.jdbc=ERROR
#log4j.logger.org.hibernate.jdbc=TRACE

##
#Google Cloud Platform
#
#Begin

#log4j.logger.org.hibernate=ERROR 

### log HQL query parser activity
#log4j.logger.org.hibernate.hql.ast.AST=DEBUG

### log just the SQL
#log4j.logger.org.hibernate.SQL=ERROR  

### log HQL parse trees
#log4j.logger.org.hibernate.hql=ERROR  

### log JDBC bind parameters ###
#log4j.logger.org.hibernate.type=ERROR
#log4j.logger.org.hibernate.type.BasicTypeRegistry=ERROR 

### log schema export/update ###
#log4j.logger.org.hibernate.tool.hbm2ddl=ERROR

### log cache activity ###
#log4j.logger.org.hibernate.cache=ERROR

### log transaction activity
#log4j.logger.org.hibernate.transaction=ERROR

### log JDBC resource acquisition
#log4j.logger.org.hibernate.jdbc=ERROR

##
#Google Cloud Platform
#
#End